package com.shopapp.admin.user;

import java.util.List;
import java.util.NoSuchElementException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.shopapp.entity.Admin;
import com.shopapp.paging.PagingAndSortingHelper;

import jakarta.transaction.Transactional;

@Service
@Transactional
public class UserService {

	public static final int USERS_PER_PAGE = 5;

	@Autowired
	private UserRepository repo;

//	@Autowired
//	private PasswordEncoder passwordEncoder;

	public Admin getByEmail(String email) {
		return repo.getAdminByEmail(email);
	}

	public List<Admin> listAll() {
		return (List<Admin>) repo.findAll();
	}

	public void listByPage(int pageNum, PagingAndSortingHelper helper) {
		helper.listEntities(pageNum, USERS_PER_PAGE, repo);
	}

	public Admin save(Admin admin) {
		boolean isUpdatingUser = (user.getId() != null);

		if (isUpdatingUser) {
			User existingUser = userRepo.findById(user.getId()).get();

			if (user.getPassword().isEmpty()) {
				user.setPassword(existingUser.getPassword());
			} else {
				encodePassword(user);
			}

		} else {
			encodePassword(user);
		}

		return userRepo.save(user);
	}

//	public User updateAccount(User userInForm) {
//		User userInDB = userRepo.findById(userInForm.getId()).get();
//
//		if (!userInForm.getPassword().isEmpty()) {
//			userInDB.setPassword(userInForm.getPassword());
//			encodePassword(userInDB);
//		}
//
//		if (userInForm.getPhotos() != null) {
//			userInDB.setPhotos(userInForm.getPhotos());
//		}
//
//		userInDB.setFirstName(userInForm.getFirstName());
//		userInDB.setLastName(userInForm.getLastName());
//
//		return userRepo.save(userInDB);
//	}

//	private void encodePassword(User user) {
//		String encodePassword = passwordEncoder.encode(user.getPassword());
//		user.setPassword(encodePassword);
//	}

	public boolean isEmailUnique(Integer id, String email) {
		Admin userByEmail = repo.getAdminByEmail(email);

		if (userByEmail == null)
			return true;

		boolean isCreatingNew = (id == null);

		if (isCreatingNew) {
			if (userByEmail != null)
				return false;
		} else {
			if (userByEmail.getId() != id) {
				return false;
			}
		}

		return true;
	}

	public Admin get(Integer id) throws UserNotFoundException {
		try {
			return repo.findById(id).get();
		} catch (NoSuchElementException ex) {
			throw new UserNotFoundException("Could not find any user with ID " + id);
		}
	}

	public void delete(Integer id) throws UserNotFoundException {
		Long countById = userRepo.countById(id);
		if (countById == null || countById == 0) {
			throw new UserNotFoundException("Could not find any user with ID " + id);
		}

		userRepo.deleteById(id);
	}

	public void updateUserEnabledStatus(Integer id, boolean enabled) {
		userRepo.updateEnabledStatus(id, enabled);
	}

}
